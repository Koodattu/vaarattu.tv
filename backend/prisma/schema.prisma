generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  twitchId     String        @unique
  login        String        @unique
  displayName  String
  avatar       String?
  updated      DateTime      @default(now())
  messages     Message[]
  redemptions  Redemption[]
  viewSessions ViewSession[]
  nameHistory  NameHistory[]
  emoteUsages  EmoteUsage[]
  viewerProfile ViewerProfile?
}

model Message {
  id        Int      @id @default(autoincrement())
  messageId String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  timestamp DateTime @default(now())
}

model ChannelReward {
  id        String   @id
  title     String
  cost      Int
  isEnabled Boolean
  imageUrl  String?
  backgroundColor String?
  redemptions Redemption[]
}

model Redemption {
  id        Int      @id @default(autoincrement())
  twitchRedemptionId String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  rewardId  String
  channelReward ChannelReward @relation(fields: [rewardId], references: [id])
  timestamp DateTime
  customText String?
}


model Stream {
  id           String          @id
  startTime    DateTime
  endTime      DateTime?
  thumbnailUrl String?
  segments     StreamSegment[]
}

model StreamSegment {
  id        Int      @id @default(autoincrement())
  stream    Stream   @relation(fields: [streamId], references: [id])
  streamId  String
  startTime DateTime
  endTime   DateTime?
  title     String
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
}

model Game {
  id        String   @id
  name      String
  boxArtUrl String?
  segments  StreamSegment[]
}

model EmoteUsage {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  emote     String
  platform  String
  count     Int
  timestamp DateTime
}

model ViewSession {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  sessionStart DateTime
  sessionEnd   DateTime?
}

model ViewerProfile {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @id
  aiSummary String?
  lastUpdate DateTime?
  stats     Json?
  consent   Boolean  @default(false)
  achievements Json?
  lastSeen     DateTime?
}

model NameHistory {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  previousName String
  detectedAt   DateTime
}

model SetupItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  modelUrl    String?
}
