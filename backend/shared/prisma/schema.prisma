generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  twitchId     String        @unique
  login        String        @unique
  displayName  String
  avatar       String?
  updated      DateTime      @default(now())

  // Relations to other models
  messages     Message[]
  redemptions  Redemption[]
  viewSessions ViewSession[]
  nameHistory  NameHistory[]
  emoteUsages  EmoteUsage[]

  // One-to-one relations
  viewerProfile    ViewerProfile?
  twitchProfile    TwitchProfile?
}

model TwitchProfile {
  userId              Int       @id
  user                User      @relation(fields: [userId], references: [id])

  // Follow/Sub status (changes frequently)
  isFollowing         Boolean   @default(false)
  followedSince       DateTime?
  isSubscribed        Boolean   @default(false)
  subscriptionTier    String?   // "1000", "2000", "3000"
  subscriptionMonths  Int       @default(0)

  // Badges (many-to-many through junction table)
  userBadges          UserBadge[]

  // Mod/VIP status
  isModerator         Boolean   @default(false)
  isVip               Boolean   @default(false)

  // Last updated (for cache invalidation)
  lastUpdated         DateTime  @default(now())
}

model Badge {
  id           Int         @id @default(autoincrement())
  twitchId     String      @unique  // Twitch's badge ID
  setId        String      // Badge set ID (e.g., "subscriber", "vip", "moderator")
  version      String      // Badge version (e.g., "0", "1", "3000")
  title        String      // Display name
  description  String?
  imageUrl     String?

  // Users who have this badge
  userBadges   UserBadge[]

  @@unique([setId, version])
}

model UserBadge {
  userId          Int
  badgeId         Int
  twitchProfile   TwitchProfile @relation(fields: [userId], references: [userId])
  badge           Badge         @relation(fields: [badgeId], references: [id])
  @@id([userId, badgeId])
}

model Message {
  id        Int      @id @default(autoincrement())
  twitchId  String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  streamId  Int
  stream    Stream   @relation(fields: [streamId], references: [id])
  content   String
  timestamp DateTime @default(now())
}

model ChannelReward {
  id        Int      @id @default(autoincrement())
  twitchId  String   @unique
  title     String
  cost      Int
  isEnabled Boolean
  imageUrl  String?
  backgroundColor String?
  redemptions Redemption[]

  // Relations to viewer profile top rewards
  topRewardProfiles ViewerProfileTopReward[]
}

model Redemption {
  id        Int      @id @default(autoincrement())
  twitchId  String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  streamId  Int
  stream    Stream   @relation(fields: [streamId], references: [id])
  rewardId  String
  channelReward ChannelReward @relation(fields: [rewardId], references: [twitchId])
  timestamp DateTime
  customText String?
}


model Stream {
  id           Int             @id @default(autoincrement())
  twitchId     String          @unique
  startTime    DateTime
  endTime      DateTime?
  thumbnailUrl String?
  segments     StreamSegment[]

  // Relations to stream-specific data
  messages     Message[]
  redemptions  Redemption[]
  viewSessions ViewSession[]
}

model StreamSegment {
  id        Int      @id @default(autoincrement())
  streamId  Int
  stream    Stream   @relation(fields: [streamId], references: [id])
  startTime DateTime
  endTime   DateTime?
  title     String
  gameId    Int
  game      Game     @relation(fields: [gameId], references: [id])
}

model Game {
  id        Int      @id @default(autoincrement())
  twitchId  String   @unique
  name      String
  boxArtUrl String?
  segments  StreamSegment[]

  // Relations to viewer profile top games
  topGameProfiles ViewerProfileTopGame[]
}

model Emote {
  id        Int      @id @default(autoincrement())
  name      String   // "Kappa", "KEKW", etc.
  platform  String   // "twitch", "bttv", "ffz", "7tv"
  emoteId   String   // Platform-specific emote ID
  imageUrl  String?  // URL to emote image
  isGlobal  Boolean  @default(true) // for channel-specific emotes
  channelId String?  // for channel-specific emotes

  @@unique([name, platform])
  @@unique([platform, emoteId])

  // Relations
  emoteUsages     EmoteUsage[]
  topEmoteProfiles ViewerProfileTopEmote[]
}

model EmoteUsage {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  emoteId   Int
  emote     Emote    @relation(fields: [emoteId], references: [id])
  count     Int      @default(1)

  // Ensure one record per user/emote combination
  @@unique([userId, emoteId])
}

model ViewSession {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  streamId     Int
  stream       Stream   @relation(fields: [streamId], references: [id])
  sessionStart DateTime
  sessionEnd   DateTime?
}

model ViewerProfile {
  userId       Int       @id
  user         User      @relation(fields: [userId], references: [id])

  // AI-generated content and tracking
  aiSummary                String?
  aiSummaryLastUpdate      DateTime?
  aiSummaryGeneratedAtMessages Int    @default(0)  // Track message count when AI summary was last generated
  consent                  Boolean   @default(true)

  // Structured analytics (calculated periodically)
  totalWatchTime     Int       @default(0)  // minutes
  totalMessages      Int       @default(0)
  totalRedemptions   Int       @default(0)
  totalPointsSpent   Int       @default(0)
  averageSessionTime Int       @default(0)  // minutes
  lastSeen          DateTime?

  // Top favorites (many-to-many relations)
  topEmotes         ViewerProfileTopEmote[]
  topGames          ViewerProfileTopGame[]
  topRewards        ViewerProfileTopReward[]
}

model NameHistory {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  previousName String
  detectedAt   DateTime
}

// Junction tables for ViewerProfile top favorites
model ViewerProfileTopEmote {
  id              Int           @id @default(autoincrement())
  viewerProfileId Int
  viewerProfile   ViewerProfile @relation(fields: [viewerProfileId], references: [userId])
  emoteId         Int
  emote           Emote         @relation(fields: [emoteId], references: [id])
  usageCount      Int           @default(0)
  rank            Int           // 1, 2, or 3 for top 3

  @@unique([viewerProfileId, rank])
  @@unique([viewerProfileId, emoteId])
}

model ViewerProfileTopGame {
  id              Int           @id @default(autoincrement())
  viewerProfileId Int
  viewerProfile   ViewerProfile @relation(fields: [viewerProfileId], references: [userId])
  gameId          Int
  game            Game          @relation(fields: [gameId], references: [id])
  watchTime       Int           @default(0)  // minutes watched for this game
  rank            Int           // 1, 2, or 3 for top 3

  @@unique([viewerProfileId, rank])
  @@unique([viewerProfileId, gameId])
}

model ViewerProfileTopReward {
  id              Int           @id @default(autoincrement())
  viewerProfileId Int
  viewerProfile   ViewerProfile @relation(fields: [viewerProfileId], references: [userId])
  rewardId        Int
  reward          ChannelReward @relation(fields: [rewardId], references: [id])
  redemptionCount Int           @default(0)  // number of times redeemed
  totalPointsSpent Int          @default(0)  // total points spent on this reward
  rank            Int           // 1, 2, or 3 for top 3

  @@unique([viewerProfileId, rank])
  @@unique([viewerProfileId, rewardId])
}
